#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: refs/tags/v1.4.5
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    # Container for Java Build and Testing
    - container: azul_java
      image: azul/zulu-openjdk-debian:11
    # Container for inlining Jacoco assets as Azure DevOps strips them
    # https://github.com/microsoft/azure-pipelines-tasks/issues/3027
    - container: node
      image: amidostacks/node:0.0.3
    # Container for Sonar Scanner
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.1
    # Container for Kubernetes Deployment
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.10
    # Container for Terraform deployments
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.4

variables:
  company: amido
  project: stacks
  domain: java-api
  role: backend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  self_repo: stacks-java
  self_remote_repo: "amido/$(self_repo)"
  self_repo_src: java
  self_repo_tf_src: deploy/azure/app/kube
  self_generic_name: stacks-api
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  tf_state_key: stacks-api-java
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: "$[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]"
  # PR / Branch vars
  source_branch_ref: "$[coalesce(variables['System.PullRequest.SourceBranch'], variables['Build.SourceBranch'])]"
  target_branch_ref: "$[coalesce(variables['System.PullRequest.TargetBranch'], '')]"
  pullrequest_number: "$[coalesce(variables['System.PullRequest.PullRequestNumber'], variables['System.PullRequest.PullRequestId'], '')]"
  # Docker Config
  docker_dockerfile_path: "."
  docker_image_name: $(self_generic_name)
  docker_image_tag: "$(version_major).$(version_minor).$(version_revision)-$(build.sourcebranchname)"
  # TODO: Change to `core` before releasing...
  docker_container_registry_name: amidostacksnonprodeuncore
  k8s_docker_registry: $(docker_container_registry_name).azurecr.io
  # BUILD ARTIFACTS across stages
  build_artifact_deploy_path: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app
  build_artifact_deploy_name: $(self_generic_name)
  # Infra
  base_domain: nonprod.amidostacks.com
  base_domain_internal: nonprod.amidostacks.internal
  # Dynamic vars for downstream purposes
  # tf_workspace_suffix: $[]
  # dns_suffix: ""
  # DEFAULT IMAGE RUNNER
  pool_vm_image: ubuntu-18.04
  # Test setup
  # ADD Vars here
  # TestCafe E2E Tests
  testcafe_e2e_test: false

stages:
  - stage: Build
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-java-api
    jobs:
      - job: ApiBuild
        pool:
          vmImage: ubuntu-18.04
        steps:
          - checkout: self

          - checkout: templates
            persistCredentials: true

          - bash: |
              echo '##vso[build.updatebuildnumber]$(docker_image_tag)'
            displayName: 'Update: Build Number'

          # TODO: Refactor these steps out into a template
          - bash: |
              terraform fmt -diff -check -recursive
            workingDirectory: "$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)"
            target:
              container: terraform_custom
            displayName: "Terraform: Format Check"

          - bash: |
              terraform init -backend=false
              terraform validate
            workingDirectory: "$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)"
            target:
              container: terraform_custom
            displayName: "Terraform: Validate Check"
            #############################################

          - template: templates/steps/build-java.yml
            parameters:
              # Docker Config
              build_on_server: false
              docker_build: true
              # PR / Branch vars
              source_branch_ref: "$(source_branch_ref)"
              target_branch_ref: "$(target_branch_ref)"
              pullrequest_number: "$(pullrequest_number)"
              # TODO: normalize this
              docker_build_additional_args: "."
              docker_workdir: "$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)"
              docker_imagename: "$(docker_image_name)"
              docker_imagetag: "$(docker_image_tag)"
              docker_containerregistryname: $(docker_container_registry_name)
              # Vulnerability Scanning
              vulnerability_scan: false
              vulnerability_workdir: "$(Build.ArtifactStagingDirectory)"
              # Sonar settings
              static_code_analysis: true
              sonar_container: sonar_scanner
              sonar_pullrequest_provider: "GitHub" # Probably `GitHub` or `vsts`
              sonar_remote_repo: "$(self_remote_repo)"
              #Linting and formatting validation
              lint_formatting: false
              shared_eslint_config: "@amidostacks/eslint-config@latest"
              # Should be hardcoded in your sonar-project.properties file
              unit_test: false
              project_root_dir: "$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_src)"
              unit_test_project: "$(Test.UnitTestProjectPath)"
              # Build Output File
              # files to be persisted across stages
              build_file: true
              build_file_path: "$(build_artifact_deploy_path)"
              build_file_artefact: "$(build_artifact_deploy_name)"
              # Git Tag release
              git_do_tag_release: false
              git_release_tag: "$(version_major).$(version_minor).$(version_revision)-$(Build.SourceBranchName)"

  - stage: Dev
    variables:
      - group: amido-stacks-infra-credentials-nonprod
    jobs:
      - job: AppInfraDev
        variables:
          ARM_SUBSCRIPTION_ID: $(azure_subscription_id)
          ARM_CLIENT_ID: $(azure_client_id)
          ARM_CLIENT_SECRET: "$(azure_client_secret)"
          ARM_TENANT_ID: $(azure_tenant_id)
        pool:
          vmImage: ubuntu-18.04
        container: terraform_custom
        steps:
          - checkout: self

          - checkout: templates
            persistCredentials: true

          # Create TF infra
          - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
            parameters:
              # Terraform Basic Config
              terraform_working_dir: '$(Agent.BuildDirectory)/s/$(self_repo)/$(self_repo_tf_src)'
              # changing this would require changing the downstream consumers of these outputs
              #
              terraform_output_artefact: 'tfoutputs'
              # Terraform State Config
              terraform_backend_client_id: $(ARM_CLIENT_ID)
              terraform_backend_client_secret: $(ARM_CLIENT_SECRET)
              terraform_backend_tenant_id: $(ARM_TENANT_ID)
              terraform_backend_subscription_id: $(ARM_SUBSCRIPTION_ID)
              terraform_state_rg: $(tf_state_rg)
              terraform_state_storage: $(tf_state_storage)
              terraform_state_container: $(tf_state_container)
              terraform_state_key: $(tf_state_key)
              # for branch based builds this can be $(Build.SourceBranchName)
              terraform_state_workspace: dev
              # Global Config
              company: $(company)
              project: $(project)
              environment: ''
              azure_cli_providers: [
                { name: MSIPreview, namespace: Microsoft.ContainerService },
              ]
              # Azure config
              tags: ''
              # Terraform Resource Specific Config
              terraform_extra_properties: {
                TF_VAR_resource_group_location: northeurope,
                TF_VAR_create_cdn_endpoint: false,
                TF_VAR_cosmosdb_sql_container: "Menu",
                TF_VAR_cosmosdb_sql_container_partition_key: "/id",
                TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                TF_VAR_cosmosdb_offer_type: "Standard",
                TF_VAR_create_dns_record: true,
                TF_VAR_app_gateway_frontend_ip_name: "amido-stacks-nonprod-eun-core",
                TF_VAR_core_resource_group: "amido-stacks-nonprod-eun-core",
                TF_VAR_app_insights_name: "amido-stacks-nonprod-eun-core",
                TF_VAR_name_company: $(company),
                TF_VAR_name_project: $(project),
                TF_VAR_name_domain: $(domain),
                TF_VAR_create_cosmosdb: true,
                TF_VAR_name_environment: dev,
                TF_VAR_dns_record: dev-java-api,
                TF_VAR_dns_zone_name: $(base_domain),
                TF_VAR_internal_dns_zone_name: $(base_domain_internal)
              }
              terraform_output_commands: |
                raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                readarray -t outputs <<<"$raw_tf"
                for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        variables:
          - name: cosmosdb_database_name
            value: "$[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_database_name'] ]"
          - name: cosmosdb_endpoint
            value: "$[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_endpoint'] ]"
          - name: cosmosdb_primary_master_key
            value: $[ dependencies.AppInfraDev.outputs['tfoutputs.cosmosdb_primary_master_key'] ]
          - name: app_insights_instrumentation_key
            value: $[ dependencies.AppInfraDev.outputs['tfoutputs.app_insights_instrumentation_key'] ]
          - name: resource_def_name
            value: "stacks-java-api"
          - name: namespace
            value: "dev-java-api"
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - checkout: templates
                  persistCredentials: true
                # Deploy Dev
                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    shared_env_vars: {
                      namespace: $(namespace),
                      role: $(role),
                      company: $(company),
                      project: $(project),
                      domain: $(domain),
                      component: api,
                      app_name: java-api,
                      resource_def_name: "$(resource_def_name)",
                      version: $(docker_image_tag),
                      environment: dev
                    }
                    enable_debug: "yes" # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    template_input: [
                      {
                        base: $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/base_api-deploy.yml,
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: dev-java-api.$(base_domain),
                          tls_domain: $(base_domain),
                          k8s_app_path: "/api/menu",
                          log_level: "Debug",
                          k8s_image: '$(k8s_docker_registry)/$(docker_image_name):$(docker_image_tag)',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: $(app_insights_instrumentation_key),
                          cosmosdb_key: $(cosmosdb_primary_master_key),
                          cosmosdb_endpoint: $(cosmosdb_endpoint),
                          cosmosdb_name: $(cosmosdb_database_name)
                        },
                        args: "-no-empty", # -no-unset is present by default
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: $(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts
                    test_artefact: "tests"
                    test_baseurl: "/"
                    functional_test: false
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: amido-stacks-nonprod-eun-core
                    kubernetes_clustername: amido-stacks-nonprod-eun-core
                    # Mutation Information
                    kubectl_filepath:
                      - $(Agent.BuildDirectory)/s/$(self_repo)/deploy/k8s/app/api-deploy.yml
                    # ReleaseNote Information
                    releasenote: false
                    kubectl_check_deployment: true
                    resource_def_name: "$(resource_def_name)"
                    namespace: "$(namespace)"
                    deployment_status_timeout: "90s"

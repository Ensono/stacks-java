#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  - master

trigger:
  branches:
    include:
      - 'master'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      # TODO: Pin this to a tag soon
      ref: refs/heads/feature/cycle4
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    # Container for Java Build and Testing
    - container: azul_java
      image: azul/zulu-openjdk-debian:11
    # Container for inlining Jacoco assets as Azure DevOps strips them
    # https://github.com/microsoft/azure-pipelines-tasks/issues/3027
    - container: node
      image: amidostacks/node:0.0.3
    # Container for Sonar Scanner
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.1
    # Container for Kubernetes Deployment
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.11
    # Container for Terraform deployments
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.4

variables:
  company: amido
  project: stacks
  domain: java-api
  role: backend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos
  self_repo: stacks-java
  self_remote_repo: "amido/$(self_repo)"
  self_repo_src: java
  self_post_deploy_test_src: "api-tests"
  self_repo_dir: "$(Agent.BuildDirectory)/s/$(self_repo)"
  self_project_dir: "$(self_repo_dir)/$(self_repo_src)"
  self_functional_testproject_dir: "$(self_repo_dir)/$(self_post_deploy_test_src)"
  self_repo_tf_src: deploy/azure/app/kube
  self_repo_tf_dir: "$(self_repo_dir)/$(self_repo_tf_src)"
  self_generic_name: stacks-java
  self_pipeline_repo: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  self_pipeline_scripts_dir: "$(self_pipeline_repo)/scripts"
  # TF STATE CONFIG
  tf_state_rg: amido-stacks-rg-uks
  tf_state_storage: amidostackstfstategbl
  tf_state_container: tfstate
  # Stacks operates Terraform states based on workspaces **IT IS VERY IMPORTANT** that you ensure a unique name for each application definition
  # Furthermore **IT IS VERY IMPORTANT** that you change the name of a workspace for each deployment stage
  # there are some best practices around this if you are going for feature based environments
  # - we suggest you create a runtime variable that is dynamically set based on a branch currently running
  # **`terraform_state_workspace: `**
  # avoid running anything past dev that is not on master
  # sample value: company-webapp
  tf_state_key: stacks-api-java
  # Versioning
  version_major: 0
  version_minor: 0
  version_revision: "$[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]"
  # PR / Branch vars
  source_branch_ref: "$[coalesce(variables['System.PullRequest.SourceBranch'], variables['Build.SourceBranch'])]"
  target_branch_ref: "$[coalesce(variables['System.PullRequest.TargetBranch'], '')]"
  pullrequest_number: "$[coalesce(variables['System.PullRequest.PullRequestNumber'], variables['System.PullRequest.PullRequestId'], '')]"
  # Docker Config
  docker_dockerfile_path: "."
  docker_image_name: $(self_generic_name)
  docker_image_tag: "${{ variables.version_major }}.${{ variables.version_minor }}.$(version_revision)-$(Build.SourceBranchName)"
  docker_container_registry_name_nonprod: amidostacksnonprodeuncore
  docker_java_image: "azul_java"
  k8s_docker_registry_nonprod: "${{ variables.docker_container_registry_name_nonprod }}.azurecr.io"
  docker_container_registry_name_prod: amidostacksprodeuncore
  k8s_docker_registry_prod: "${{ variables.docker_container_registry_name_prod }}.azurecr.io"
  # BUILD ARTIFACTS across stages
  build_artifact_deploy_path: "${{ variables.self_repo_dir }}/deploy/k8s/app"
  build_artifact_deploy_name: "${{ variables.self_generic_name }}"
  # Infra
  base_domain_nonprod: nonprod.amidostacks.com
  base_domain_internal_nonprod: nonprod.amidostacks.internal
  base_domain_prod: prod.amidostacks.com
  base_domain_internal_prod: prod.amidostacks.internal
  # Maven
  maven_cache_directory: "./.m2"
  maven_surefire_reports_dir: "target/surefire-reports"
  maven_allowed_test_tags: "Unit | Component | Integration"
  maven_allowed_post_deploy_test_tags: "@Functional or @Smoke or @Performance"
  maven_ignored_post_deploy_test_tags: "@Ignore"
  maven_post_deploy_html_report_directory: "target/site/serenity"
  maven_post_deploy_failsafe_reports_directory: "target/failsafe-reports"
  # Vulnerability Scan
  vulnerability_scan: true
  vulnerability_scan_report: "target/dependency-check-report.html"
  vulnerability_scan_fail_build_on_detection: false
  # Yamllint
  yamllint_config_file: "${{ variables.self_repo_dir }}/yamllint.conf"
  yamllint_scan_directory: "."
  # Functional Tests
  functional_test: true
  functional_test_path: "${{ variables.self_functional_testproject_dir }}"
  functional_test_artefact_path: "${{ variables.self_repo_dir }}/${{ variables.self_post_deploy_test_src }}"
  functional_test_artefact_name: "post-deploy-test-artefact"
  functional_test_artefact_download_location: "$(Pipeline.Workspace)/${{ variables.functional_test_artefact_name }}"
  # Build Task Naming
  java_project_type: "Java App"
  functional_test_project_type: "Functional API Tests"

stages:
  - stage: Build
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-infra-credentials-nonprod
      - group: amido-stacks-java-api
    jobs:
      - job: ApiBuild
        pool:
          vmImage: ubuntu-18.04
        steps:
          - checkout: self

          - checkout: templates

          # Updates the build number in Azure DevOps (requires refresh in the UI to see)
          - bash: |
              echo '##vso[build.updatebuildnumber]${{ variables.docker_image_tag }}'
            displayName: 'Update: Build Number'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: templates/steps/test-validate-yaml.yml
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Runs a terraform fomatting check and a validation check
          - template: templates/steps/test-validate-terraform.yml
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              terraform_container: "terraform_custom"
              terraform_directory: "${{ variables.self_repo_tf_dir }}"

          # Builds the Java app and runs tests
          - template: templates/steps/build-java.yml
            parameters:
              repo_root_dir: "${{ variables.self_repo_dir }}"
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              # Maven
              maven_cache_directory: "${{ variables.maven_cache_directory }}"
              maven_surefire_reports_dir: "${{ variables.maven_surefire_reports_dir }}"
              maven_allowed_test_tags: "${{ variables.maven_allowed_test_tags}}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"
              # Vulnerability Scanning
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_fail_build_on_detection: "${{ variables.vulnerability_scan_fail_build_on_detection }}"
              project_type: "${{ variables.java_project_type }}"

          # Builds the Java API Tests
          - template: templates/steps/build-api-tests.yml
            parameters:
              repo_root_dir: "${{ variables.self_repo_dir }}"
              functional_test_project_root_dir: "${{ variables.self_functional_testproject_dir }}"
              functional_test_artefact_path: "${{ variables.functional_test_artefact_path }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              # Maven
              maven_cache_directory: "${{ variables.maven_cache_directory }}"
              maven_allowed_post_deploy_test_tags: "${{ variables.maven_allowed_post_deploy_test_tags }}"
              maven_ignored_post_deploy_test_tags: "${{ variables.maven_ignored_post_deploy_test_tags }}"
              maven_post_deploy_html_report_directory: "${{ variables.maven_post_deploy_html_report_directory }}"
              maven_post_deploy_failsafe_reports_directory: "${{ variables.maven_post_deploy_failsafe_reports_directory }}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"
              # Vulnerability Scan
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_fail_build_on_detection: "${{ variables.vulnerability_scan_fail_build_on_detection }}"
              project_type: "${{ variables.functional_test_project_type }}"

          # Performs stati code analysis, such as Sonar Cloud
          - template: templates/steps/test-static-code-analysis.yml
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir}}"
              # PR / Branch vars
              source_branch_ref: "$(source_branch_ref)"
              target_branch_ref: "$(target_branch_ref)"
              pullrequest_number: "$(pullrequest_number)"
              # Sonar
              sonar_enable: true
              sonar_container: "sonar_scanner"
              sonar_host_url: "https://sonarcloud.io"
              sonar_project_name: "$(SONAR_PROJECT_NAME)"
              sonar_project_key: "$(SONAR_PROJECT_KEY)"
              sonar_token: "$(SONAR_TOKEN)"
              sonar_organisation: "$(SONAR_ORGANIZATION)"
              sonar_pullrequest_provider: "GitHub" # Probably `GitHub` or `vsts`
              sonar_remote_repo: "${{ variables.self_remote_repo }}"
              sonar_command: "sonar-scanner"
              # Docker
              docker_image_tag: "${{ variables.docker_image_tag }}"

          # Builds the Docker image and pushes it to an ACR
          - template: templates/steps/build-docker-image.yml
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              docker_k8s_container: "k8s_deploy"
              docker_build_additional_args: "."
              docker_image_name: "${{ variables.docker_image_name }}"
              docker_image_tag: "${{ variables.docker_image_tag }}"
              docker_container_registry_name: "${{ variables.docker_container_registry_name_nonprod }}"
              # Azure
              azure_client_id: "$(AZURE_CLIENT_ID)"
              azure_client_secret: "$(AZURE_CLIENT_SECRET)"
              azure_tenant_id: "$(AZURE_TENANT_ID)"
              azure_subscription_id: "$(AZURE_SUBSCRIPTION_ID)"

          # Post build tasks, such as Test and Coverage upload, and publishing artefacts
          - template: templates/steps/post-build-tasks.yml
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              functional_test_project_root_dir: "${{ variables.self_functional_testproject_dir }}"
              # Build Output File
              # files to be persisted across stages
              build_file: true
              build_file_path: "${{ variables.build_artifact_deploy_path }}"
              build_file_artefact_name: "${{ variables.build_artifact_deploy_name }}"
              # Functional tests
              functional_test: ${{ variables.functional_test }}
              functional_test_artefact_name: "${{ variables.functional_test_artefact_name }}"
              functional_test_artefact_path: "${{ variables.functional_test_artefact_path }}"
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_report: "${{ variables.vulnerability_scan_report }}"
              java_project_type: "${{ variables.java_project_type }}"
              functional_test_project_type: "${{ variables.functional_test_project_type }}"

  - stage: Dev
    variables:
      - group: amido-stacks-infra-credentials-nonprod
    jobs:
      - deployment: AppInfraDev
        container: terraform_custom
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '${{ variables.self_repo_tf_dir }}'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: "$(azure_client_id)"
                    terraform_backend_client_secret: "$(azure_client_secret)"
                    terraform_backend_tenant_id: "$(azure_tenant_id)"
                    terraform_backend_subscription_id: "$(azure_subscription_id)"
                    terraform_state_rg: "${{ variables.tf_state_rg }}"
                    terraform_state_storage: "${{ variables.tf_state_storage }}"
                    terraform_state_container: "${{ variables.tf_state_container }}"
                    terraform_state_key: "${{ variables.tf_state_key }}"
                    # for branch based builds this can be $(Build.SourceBranchName)
                    terraform_state_workspace: "$(Environment.Name)"
                    # Azure Config for Terraform
                    azure_client_id: "$(azure_client_id)"
                    azure_client_secret: "$(azure_client_secret)"
                    azure_tenant_id: "$(azure_tenant_id)"
                    azure_subscription_id: "$(azure_subscription_id)"
                    # Global Config
                    company: "${{ variables.company }}"
                    project: "${{ variables.project }}"
                    environment: ''
                    azure_cli_providers: [
                      { name: MSIPreview, namespace: Microsoft.ContainerService },
                    ]
                    # Azure config
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: northeurope,
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_cosmosdb_sql_container: "Menu",
                      TF_VAR_cosmosdb_sql_container_partition_key: "/id",
                      TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                      TF_VAR_cosmosdb_offer_type: "Standard",
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_gateway_frontend_ip_name: "amido-stacks-nonprod-eun-core",
                      TF_VAR_core_resource_group: "amido-stacks-nonprod-eun-core",
                      TF_VAR_app_insights_name: "amido-stacks-nonprod-eun-core",
                      TF_VAR_name_company: "${{ variables.company }}",
                      TF_VAR_name_project: "${{ variables.project }}",
                      TF_VAR_name_domain: "${{ variables.domain }}",
                      TF_VAR_create_cosmosdb: true,
                      TF_VAR_name_environment: "$(Environment.Name)",
                      TF_VAR_dns_record: "$(Environment.Name)-java-api",
                      TF_VAR_dns_zone_name: "$(base_domain_nonprod)",
                      TF_VAR_internal_dns_zone_name: "${{ variables.base_domain_internal_nonprod }}",
                      TF_VAR_stage: "$(Environment.Name)",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<< "$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - deployment: DeployDev
        dependsOn: AppInfraDev
        container: k8s_deploy
        variables:
          - name: cosmosdb_database_name
            value: "$[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_database_name'] ]"
          - name: cosmosdb_endpoint
            value: "$[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_endpoint'] ]"
          - name: cosmosdb_primary_master_key
            value: "$[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.cosmosdb_primary_master_key'] ]"
          - name: app_insights_instrumentation_key
            value: "$[ dependencies.AppInfraDev.outputs['AppInfraDev.tfoutputs.app_insights_instrumentation_key'] ]"
          - name: resource_def_name
            value: "stacks-java-api"
          - name: namespace
            value: "$(Environment.Name)-java-api"
          - name: dns_pointer
            value: "$(Environment.Name)-java-api.${{ variables.base_domain_nonprod }}"
          - name: k8s_app_path
            value: "/api"
          - name: functional_test_base_url
            value: "https://${{ variables.dns_pointer }}/${{ variables.k8s_app_path }}"
        pool:
          vmImage: ubuntu-18.04
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Deploy Dev
                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts"
                    shared_env_vars: {
                      namespace: "${{ variables.namespace }}",
                      role: "${{ variables.role }}",
                      company: "${{ variables.company}}",
                      project: "${{ variables.project }}",
                      domain: "${{ variables.domain }}",
                      component: api,
                      app_name: java-api,
                      resource_def_name: "${{ variables.resource_def_name }}",
                      version: "${{ variables.docker_image_tag }}",
                      environment: $(Environment.Name),
                    }
                    enable_debug: "yes" # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    template_input: [
                      {
                        base: "${{ variables.self_repo_dir }}/deploy/k8s/app/base_api-deploy.yml",
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: "${{ variables.dns_pointer }}",
                          tls_domain: "${{ variables.base_domain_nonprod }}",
                          k8s_app_path: "${{ variables.k8s_app_path }}",
                          log_level: "Debug",
                          k8s_image: '${{ variables.k8s_docker_registry_nonprod }}/${{ variables.docker_image_name }}:${{ variables.docker_image_tag }}',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: "$(app_insights_instrumentation_key)",
                          cosmosdb_key: "$(cosmosdb_primary_master_key)",
                          cosmosdb_endpoint: "$(cosmosdb_endpoint)",
                          cosmosdb_name: "$(cosmosdb_database_name)",
                        },
                        args: "-no-empty", # -no-unset is present by default
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts"
                    functional_test: false
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: amido-stacks-nonprod-eun-core
                    kubernetes_clustername: amido-stacks-nonprod-eun-core
                    # Mutation Information
                    kubectl_filepath:
                      - "${{ variables.self_repo_dir }}/deploy/k8s/app/api-deploy.yml"
                    # ReleaseNote Information
                    releasenote: false
                    kubectl_check_deployment: true
                    resource_def_name: "${{ variables.resource_def_name }}"
                    namespace: "${{ variables.namespace }}"
                    deployment_status_timeout: "120s"
                    azure_client_id: "$(azure_client_id)"
                    azure_client_secret: "$(azure_client_secret)"
                    azure_tenant_id: "$(azure_tenant_id)"
                    azure_subscription_id: "$(azure_subscription_id)"

                - template: templates/steps/deploy/deploy-post-deploy-tests.yml
                  parameters:
                    environment: "$(Environment.Name)"
                    pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
                    functional_test: ${{ variables.functional_test }}
                    functional_test_artefact_name: "${{ variables.functional_test_artefact_name }}"
                    functional_test_artefact_download_location: "${{ variables.functional_test_artefact_download_location }}"
                    functional_test_base_url: "${{ variables.functional_test_base_url }}"
                    maven_cache_directory: "${{ variables.maven_cache_directory }}"
                    maven_ignored_post_deploy_test_tags: "${{ variables.maven_ignored_post_deploy_test_tags }}"
                    maven_post_deploy_html_report_directory: "${{ variables.maven_post_deploy_html_report_directory }}"
                    docker_java_container: "${{ variables.docker_java_image }}"

  - stage: Prod
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    variables:
      - group: amido-stacks-infra-credentials-prod
    jobs:
      - deployment: AppInfraProd
        container: terraform_custom
        pool:
          vmImage: ubuntu-18.04
        environment: prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                # Create TF infra
                - template: azDevOps/azure/templates/v2/steps/deploy-terraform-resource.yml@templates
                  parameters:
                    # Terraform Basic Config
                    terraform_working_dir: '${{ variables.self_repo_tf_dir }}'
                    # changing this would require changing the downstream consumers of these outputs
                    #
                    terraform_output_artefact: 'tfoutputs'
                    # Terraform State Config
                    terraform_backend_client_id: "$(prod_azure_client_id)"
                    terraform_backend_client_secret: "$(prod_azure_client_secret)"
                    terraform_backend_tenant_id: "$(prod_azure_tenant_id)"
                    terraform_backend_subscription_id: "$(prod_azure_subscription_id)"
                    terraform_state_rg: "${{ variables.tf_state_rg }}"
                    terraform_state_storage: "${{ variables.tf_state_storage }}"
                    terraform_state_container: "${{ variables.tf_state_container }}"
                    terraform_state_key: "${{ variables.tf_state_key }}"
                    # for branch based builds this can be $(Build.SourceBranchName)
                    terraform_state_workspace: "$(Environment.Name)"
                    # Azure Config for Terraform
                    azure_client_id: "$(prod_azure_client_id)"
                    azure_client_secret: "$(prod_azure_client_secret)"
                    azure_tenant_id: "$(prod_azure_tenant_id)"
                    azure_subscription_id: "$(prod_azure_subscription_id)"
                    # Global Config
                    company: "${{ variables.company }}"
                    project: "${{ variables.project }}"
                    environment: ''
                    azure_cli_providers: [
                      { name: MSIPreview, namespace: Microsoft.ContainerService },
                    ]
                    # Azure config
                    tags: ''
                    # Terraform Resource Specific Config
                    terraform_extra_properties: {
                      TF_VAR_resource_group_location: northeurope,
                      TF_VAR_create_cdn_endpoint: false,
                      TF_VAR_cosmosdb_sql_container: "Menu",
                      TF_VAR_cosmosdb_sql_container_partition_key: "/id",
                      TF_VAR_cosmosdb_kind: "GlobalDocumentDB",
                      TF_VAR_cosmosdb_offer_type: "Standard",
                      TF_VAR_create_dns_record: true,
                      TF_VAR_app_gateway_frontend_ip_name: "amido-stacks-prod-eun-core",
                      TF_VAR_core_resource_group: "amido-stacks-prod-eun-core",
                      TF_VAR_app_insights_name: "amido-stacks-prod-eun-core",
                      TF_VAR_name_company: "${{ variables.company }}",
                      TF_VAR_name_project: "${{ variables.project }}",
                      TF_VAR_name_domain: "${{ variables.domain }}",
                      TF_VAR_create_cosmosdb: true,
                      TF_VAR_name_environment: "$(Environment.Name)",
                      TF_VAR_dns_record: "$(Environment.Name)-java-api",
                      TF_VAR_dns_zone_name: "$(base_domain_prod)",
                      TF_VAR_internal_dns_zone_name: "${{ variables.base_domain_internal_prod }}",
                      TF_VAR_stage: "$(Environment.Name)",
                    }
                    terraform_output_commands: |
                      raw_tf=$(terraform output -json | jq -r 'keys[] as $k | "##vso[task.setvariable variable=\($k);isOutput=true]\(.[$k] | .value)"')
                      readarray -t outputs <<< "$raw_tf"
                      for i in "${outputs[@]}"; do echo "$i"; done

      - job: PromotionProd
        dependsOn: AppInfraProd
        variables:
          - group: amido-stacks-infra-credentials-nonprod
          - group: amido-stacks-infra-credentials-prod
        pool:
          vmImage: ubuntu-18.04
        container: k8s_deploy
        steps:
          - checkout: self

          - checkout: templates

          - task: Bash@3
            inputs:
              filePath: "$(self_pipeline_scripts_dir)/util-azure-promote-image.bash"
              arguments: >
                -a "$(docker_image_name):$(docker_image_tag)"
                -b "$(k8s_docker_registry_nonprod)"
                -c "$(azure_subscription_id)"
                -d "$(azure_client_id)"
                -e "$(azure_client_secret)"
                -f "$(azure_tenant_id)"
                -g "$(k8s_docker_registry_prod)"
                -h "$(prod_azure_subscription_id)"
                -i "$(prod_azure_client_id)"
                -j "$(prod_azure_client_secret)"
                -k "$(prod_azure_tenant_id)"
                -Z "false"
            displayName: Promote Docker Image to Production ACR

      - deployment: DeployProd
        dependsOn:
          - AppInfraProd
          - PromotionProd
        container: k8s_deploy
        variables:
          - name: cosmosdb_database_name
            value: "$[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_database_name'] ]"
          - name: cosmosdb_endpoint
            value: "$[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_endpoint'] ]"
          - name: cosmosdb_primary_master_key
            value: "$[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.cosmosdb_primary_master_key'] ]"
          - name: app_insights_instrumentation_key
            value: "$[ dependencies.AppInfraProd.outputs['AppInfraProd.tfoutputs.app_insights_instrumentation_key'] ]"
          - name: resource_def_name
            value: "stacks-java-api"
          - name: namespace
            value: "$(Environment.Name)-java-api"
          - name: dns_pointer
            value: "$(Environment.Name)-java-api.${{ variables.base_domain_prod }}"
          - name: k8s_app_path
            value: "/api"
          - name: functional_test_base_url
            value: "https://${{ variables.dns_pointer }}/${{ variables.k8s_app_path }}"
        pool:
          vmImage: ubuntu-18.04
        environment: prod
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - checkout: templates

                - template: azDevOps/azure/templates/v2/steps/yaml-k8s-templater.yml@templates
                  parameters:
                    scripts_dir: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts"
                    shared_env_vars: {
                      namespace: "${{ variables.namespace }}",
                      role: "${{ variables.role }}",
                      company: "${{ variables.company}}",
                      project: "${{ variables.project }}",
                      domain: "${{ variables.domain }}",
                      component: api,
                      app_name: java-api,
                      resource_def_name: "${{ variables.resource_def_name }}",
                      version: "${{ variables.docker_image_tag }}",
                      environment: $(Environment.Name),
                    }
                    enable_debug: "yes" # uncomment for debug and if you want to see the templated out file in the STDOUT of pipeline
                    template_input: [
                      {
                        base: "${{ variables.self_repo_dir }}/deploy/k8s/app/base_api-deploy.yml",
                        displayName: AppDeployment,
                        env_vars: {
                          dns_pointer: "${{ variables.dns_pointer }}",
                          tls_domain: "${{ variables.base_domain_prod }}",
                          k8s_app_path: "${{ variables.k8s_app_path }}",
                          log_level: "Debug",
                          k8s_image: '${{ variables.k8s_docker_registry_prod }}/${{ variables.docker_image_name }}:${{ variables.docker_image_tag }}',
                          aadpodidentitybinding: stacks-webapp-identity,
                          app_insights_key: "$(app_insights_instrumentation_key)",
                          cosmosdb_key: "$(cosmosdb_primary_master_key)",
                          cosmosdb_endpoint: "$(cosmosdb_endpoint)",
                          cosmosdb_name: "$(cosmosdb_database_name)",
                        },
                        args: "-no-empty", # -no-unset is present by default
                      }
                    ]

                - template: azDevOps/azure/templates/v2/steps/deploy-k8s-app-kubectl.yml@templates
                  parameters:
                    scripts_dir: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates/azDevOps/azure/templates/v2/scripts"
                    functional_test: false
                    performance_test: false
                    smoke_test: false
                    # Kubernetes Config
                    kubernetes_clusterrg: amido-stacks-prod-eun-core
                    kubernetes_clustername: amido-stacks-prod-eun-core
                    # Mutation Information
                    kubectl_filepath:
                      - "${{ variables.self_repo_dir }}/deploy/k8s/app/api-deploy.yml"
                    # ReleaseNote Information
                    releasenote: false
                    kubectl_check_deployment: true
                    resource_def_name: "${{ variables.resource_def_name }}"
                    namespace: "${{ variables.namespace }}"
                    deployment_status_timeout: "120s"
                    azure_client_id: "$(prod_azure_client_id)"
                    azure_client_secret: "$(prod_azure_client_secret)"
                    azure_tenant_id: "$(prod_azure_tenant_id)"
                    azure_subscription_id: "$(prod_azure_subscription_id)"

                - template: templates/steps/deploy/deploy-post-deploy-tests.yml
                  parameters:
                    environment: "$(Environment.Name)"
                    pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
                    functional_test: ${{ variables.functional_test }}
                    functional_test_artefact_name: "${{ variables.functional_test_artefact_name }}"
                    functional_test_artefact_download_location: "${{ variables.functional_test_artefact_download_location }}"
                    functional_test_base_url: "${{ variables.functional_test_base_url }}"
                    maven_cache_directory: "${{ variables.maven_cache_directory }}"
                    maven_ignored_post_deploy_test_tags: "${{ variables.maven_ignored_post_deploy_test_tags }}"
                    maven_post_deploy_html_report_directory: "${{ variables.maven_post_deploy_html_report_directory }}"
                    maven_post_deploy_failsafe_reports_directory: "$(maven_post_deploy_failsafe_reports_directory)"
                    docker_java_container: "${{ variables.docker_java_image }}"

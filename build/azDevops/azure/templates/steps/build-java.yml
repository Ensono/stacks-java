parameters:
  pool:
    vmImage: "ubuntu-latest"
  versionSpec: 12.x
  project_root_dir: ""
  dependsOn: "GetPackage"
  download_devops: true
  # PR / Branch vars
  source_branch_ref: ""
  target_branch_ref: ""
  pullrequest_number: ""
  # Custom registry (eg. private)
  customRegistry: ""
  # Docker Config
  docker_build: true
  docker_build_additional_args: ""
  docker_workdir: ""
  docker_imagename: ""
  docker_imagetag: ""
  docker_containerregistryname: ""
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ""
  #  Static Code Analysis
  static_code_analysis: false
  sonar_container: ""
  sonar_pullrequest_provider: ""
  sonar_remote_repo: ""
  # Linting and formatting validation
  lint_formatting: ""
  shared_eslint_config: ""
  # Testing
  unit_test: true
  contract_test: true
  audit_test: false
  contract_check_can_deploy: true
  cypress_e2e_test: true
  cypress_applitools_test: false
  cypress_e2e_env_vars: {}
  # Build File Output
  build_file: false
  build_on_server: false
  build_file_path: ""
  build_file_artefact: ""
  # build output defaults
  git_do_tag_release: false
  git_release_tag: ""

steps:
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | ${{ parameters.project_root_dir }}/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: "${{ parameters.project_root_dir }}/.m2"
    displayName: Cache Maven packages

  # Login to Azure/AKS
  - template: azDevOps/azure/templates/v2/steps/login-services.yml@templates
    parameters:
      azure_tenant_id: "$(azure_tenant_id)"
      azure_subscription_id: "$(azure_subscription_id)"
      azure_client_id: "$(azure_client_id)"
      azure_client_secret: "$(azure_client_secret)"
      login_azure: true

  - bash: |
      set -euxo pipefail
      set +x; echo "dependency:go-offline"; set -x
      ./mvnw dependency:go-offline -Dmaven.repo.local=./.m2 --no-transfer-progress
      set +x; echo "##[endgroup]"; set -x
      set +x; echo "##[group]process-resources"; set -x
      ./mvnw process-resources --no-transfer-progress -Dmaven.repo.local=./.m2
      set +x; echo "##[endgroup]"; set -x
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Maven: Install Packages"

  - bash: |
      set -euxo pipefail
      set +x; echo "##[group]compile"; set -x
      ./mvnw compile --no-transfer-progress -Dmaven.repo.local=./.m2 --offline
      set +x; echo "##[endgroup]"; set -x
      set +x; echo "##[group]process-test-resources"
      ./mvnw process-test-resources --no-transfer-progress -Dmaven.repo.local=./.m2 --offline
      set +x; echo "##[endgroup]"; set -x
      set +x; echo "##[group]test-compile"; set -x
      # TODO: See if we can run this `--offline`.
      ./mvnw test-compile --no-transfer-progress -Dmaven.repo.local=./.m2 # --offline
      set +x; echo "##[endgroup]"; set -x
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Maven: Compile Application"

  - bash: |
      set -euxo pipefail
      ./mvnw test --no-transfer-progress -Dmaven.repo.local=./.m2 -DexcludedGroups='any()'
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Test: Download Test Deps"

  - bash: |
      set -euxo pipefail
      ./mvnw test --no-transfer-progress -Dmaven.repo.local=./.m2 --offline -Dgroups=Unit
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Test: Unit tests"

  - bash: |
      set -euxo pipefail
      ./mvnw test --no-transfer-progress -Dmaven.repo.local=./.m2 --offline -Dgroups=Component
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Test: Component tests"

  - bash: |
      set -euxo pipefail
      ./mvnw test --no-transfer-progress -Dmaven.repo.local=./.m2 --offline -Dgroups=Integration
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Test: Integration tests"

  - bash: |
      set -euxo pipefail
      ./mvnw jacoco:report --no-transfer-progress -Dmaven.repo.local=./.m2 --offline
    workingDirectory: "${{ parameters.project_root_dir }}"
    target:
      container: azul_java
    displayName: "Generate Jacoco coverage reports"

  - bash: |
      set -euxo pipefail
      cp "${{ parameters.project_root_dir }}/../build/azDevops/azure/coverage/"* .
      npm i
      ./node_modules/.bin/gulp inline-css-images
      ./node_modules/.bin/gulp inline-sources
    workingDirectory: "${{ parameters.project_root_dir }}/target/site/"
    target:
      container: node
    displayName: "Gulp: Inline Jacoco report assets"

  # SonarCloud
  - ${{ if eq(parameters.static_code_analysis, true) }}:
      - bash: |
          set -euxo pipefail
          function strip_refs()
          {
            local BRANCH_REF="$1"

            RETURN_BRANCH="$(sed -e "s%^refs/\(heads\|tags\)/%%" <<< $BRANCH_REF)"
          }

          strip_refs "${{ parameters.source_branch_ref }}"
          SOURCE_BRANCH=$RETURN_BRANCH

          strip_refs "${{ parameters.target_branch_ref }}"
          TARGET_BRANCH=$RETURN_BRANCH

          if [ -z "${{ parameters.pullrequest_number }}" ]; then
            EXTRA_SONAR_ARGUMENTS="-Dsonar.branch.name='$SOURCE_BRANCH'"
            EXTRA_SONAR_ARGUMENTS="${EXTRA_SONAR_ARGUMENTS} -Dsonar.branch.target='$TARGET_BRANCH'"
          else
            PROVIDER_LOWERCASED="$(tr '[:upper:]' '[:lower:]' <<< "${{ parameters.sonar_pullrequest_provider }}")"

            EXTRA_SONAR_ARGUMENTS="-Dsonar.pullrequest.key='${{ parameters.pullrequest_number }}'"
            EXTRA_SONAR_ARGUMENTS="${EXTRA_SONAR_ARGUMENTS} -Dsonar.pullrequest.branch='$SOURCE_BRANCH'"
            EXTRA_SONAR_ARGUMENTS="${EXTRA_SONAR_ARGUMENTS} -Dsonar.pullrequest.provider='$PROVIDER_LOWERCASED'"
            EXTRA_SONAR_ARGUMENTS="${EXTRA_SONAR_ARGUMENTS} -Dsonar.pullrequest.base='$TARGET_BRANCH'"

            if [ "$PROVIDER_LOWERCASED" == 'github' ]; then
              EXTRA_SONAR_ARGUMENTS="${EXTRA_SONAR_ARGUMENTS} -Dsonar.pullrequest.github.repository='${{ parameters.sonar_remote_repo }}'"
            fi
          fi

          echo "##vso[task.setvariable variable=bash_extra_sonar_arguments]$EXTRA_SONAR_ARGUMENTS"
        displayName: "Sonar: Extra Sonar Arguments"

      - template: azDevOps/azure/templates/v2/steps/test-static-code-sonar.yml@templates
        parameters:
          working_directory: "${{ parameters.project_root_dir }}"
          target_container: "${{ parameters.sonar_container }}"
          extra_arguments: "$(bash_extra_sonar_arguments)"
          env_vars: {
            SONAR_HOST_URL: "https://sonarcloud.io",
            SONAR_TOKEN: $SONAR_TOKEN,
            SONAR_PROJECT_KEY: $SONAR_PROJECT_KEY,
            SONAR_ORGANIZATION: $SONAR_ORGANIZATION,
            SONAR_PROJECT_NAME: $SONAR_PROJECT_NAME,
            BUILD_NUMBER: $(docker_image_tag),
            SONAR_SCANNER_OPTS: "",
            # PR Sonar Variables
            # SONAR_BRANCH_NAME: "${{ parameters.branch_ref }}",
            # SONAR_PULL_REQUEST: "${{ parameters.pull_request_number }}",
            # SONAR_PR_PROVIDER: "GitHub",
            # SONAR_GITHUB_REPO: "amido/stacks-java",
          }

  - ${{ if eq(parameters.docker_build, true) }}:
      - template: azDevOps/azure/templates/v2/steps/build-container-image.yml@templates
        parameters:
          workingDirectory: ${{ parameters.docker_workdir }}
          docker_build_additional_args: ${{ parameters.docker_build_additional_args }}
          docker_imagename: ${{ parameters.docker_imagename }}
          docker_imagetag: ${{ parameters.docker_imagetag }}
          docker_containerregistryname: ${{ parameters.docker_containerregistryname }}

  - task: PublishTestResults@2

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: "JaCoCo"
      summaryFileLocation: "${{ parameters.project_root_dir }}/target/site/jacoco/jacoco.xml"
      reportDirectory: "${{ parameters.project_root_dir }}/target/site/jacoco-inline"

  # Publish Artefacts if required
  - ${{ if eq(parameters.functional_test, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: "Publish: Functional Tests Artifact"
        inputs:
          path: "${{ parameters.functional_test_path }}"
          artifact: "${{ parameters.functional_test_artefact }}"

  - ${{ if eq(parameters.build_file, true) }}:
      - task: PublishPipelineArtifact@1
        displayName: "Publish: Build Artefacts"
        inputs:
          path: "${{ parameters.build_file_path }}"
          artifact: "${{ parameters.build_file_artefact }}"
